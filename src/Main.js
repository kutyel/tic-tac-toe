// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Client$BsSocket = require("bs-socket/src/Client.bs.js");
var Common$TicTacToe = require("./Common.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var Client = Client$BsSocket.Make([Common$TicTacToe.stringify]);

var socket = Curry._1(Client[/* create */0], /* () */0);

var component = ReasonReact.reducerComponent("Game");

function px(x) {
  return String(x) + "px";
}

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              return Curry._3(Client[/* on */2], socket, /* Message */0, (function (data) {
                            if (typeof data === "number") {
                              return Curry._1(self[/* send */3], /* Restart */0);
                            } else if (data.tag) {
                              return Curry._1(self[/* send */3], /* Click */Block.__(1, [data[0]]));
                            } else {
                              return Curry._1(self[/* send */3], /* NewState */Block.__(0, [data[0]]));
                            }
                          }));
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var yourTurn = self[/* state */1][/* you */2] === self[/* state */1][/* turn */1];
              var match = self[/* state */1][/* winner */3];
              var message;
              if (match) {
                var match$1 = match[0];
                if (match$1) {
                  var match$2 = List.nth(self[/* state */1][/* grid */0], match$1[0]) === /* X */0;
                  message = match$2 ? "X wins!" : "O wins";
                } else {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "Main.re",
                          35,
                          13
                        ]
                      ];
                }
              } else {
                message = yourTurn ? "Your turn" : "Their turn";
              }
              return React.createElement("div", {
                          style: {
                            display: "flex",
                            width: String(439) + "px",
                            alignItems: "center",
                            flexDirection: "column"
                          }
                        }, React.createElement("div", {
                              style: {
                                fontSize: String(45) + "px"
                              }
                            }, message), React.createElement("button", {
                              style: {
                                backgroundColor: "#EEEEEE",
                                border: "1px solid #AAAAAA",
                                cursor: "pointer",
                                fontSize: String(20) + "px",
                                marginTop: String(8) + "px",
                                marginBottom: String(16) + "px"
                              },
                              onClick: (function () {
                                  Curry._3(Client[/* emit */1], socket, /* Message */0, /* Restart */0);
                                  return Curry._1(self[/* send */3], /* Restart */0);
                                })
                            }, "Restart"), React.createElement("div", {
                              style: {
                                display: "flex",
                                height: String(443) + "px",
                                width: String(443) + "px",
                                flexWrap: "wrap",
                                justifyContent: "left"
                              }
                            }, $$Array.of_list(List.mapi((function (i, piece) {
                                        var match;
                                        switch (piece) {
                                          case 0 : 
                                              match = /* tuple */[
                                                "X",
                                                false
                                              ];
                                              break;
                                          case 1 : 
                                              match = /* tuple */[
                                                "O",
                                                false
                                              ];
                                              break;
                                          case 2 : 
                                              match = /* tuple */[
                                                " ",
                                                true
                                              ];
                                              break;
                                          
                                        }
                                        var match$1 = self[/* state */1][/* winner */3];
                                        var backgroundColor;
                                        if (match$1) {
                                          var isCurrentCellWinner = List.mem(i, match$1[0]);
                                          backgroundColor = isCurrentCellWinner && List.nth(self[/* state */1][/* grid */0], i) === self[/* state */1][/* you */2] ? "green" : (
                                              isCurrentCellWinner ? "red" : "white"
                                            );
                                        } else {
                                          backgroundColor = "white";
                                        }
                                        var canClick = match[1] && yourTurn && self[/* state */1][/* winner */3] === /* None */0 && self[/* state */1][/* you */2] !== /* Empty */2;
                                        return React.createElement("div", {
                                                    key: String(i),
                                                    style: {
                                                      backgroundColor: backgroundColor,
                                                      border: "1px solid black",
                                                      cursor: canClick ? "pointer" : "",
                                                      display: "flex",
                                                      fontSize: String(45) + "px",
                                                      height: String(145) + "px",
                                                      marginBottom: String(-1) + "px",
                                                      marginLeft: String(-1) + "px",
                                                      paddingTop: String(2) + "px",
                                                      width: String(145) + "px",
                                                      alignItems: "center",
                                                      justifyContent: "center"
                                                    },
                                                    onClick: (function () {
                                                        if (canClick) {
                                                          Curry._3(Client[/* emit */1], socket, /* Message */0, /* Click */Block.__(1, [i]));
                                                          return Curry._1(self[/* send */3], /* Click */Block.__(1, [i]));
                                                        } else {
                                                          return 0;
                                                        }
                                                      })
                                                  }, React.createElement("span", undefined, match[0]));
                                      }), self[/* state */1][/* grid */0]))));
            }),
          /* initialState */(function () {
              return Common$TicTacToe.initialState(/* Empty */2);
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                return /* Update */Block.__(0, [Common$TicTacToe.updateState(/* Restart */0, state)]);
              } else if (action.tag) {
                return /* Update */Block.__(0, [Common$TicTacToe.updateState(/* Click */Block.__(1, [action[0]]), state)]);
              } else {
                return /* Update */Block.__(0, [Common$TicTacToe.updateState(/* NewState */Block.__(0, [action[0]]), state)]);
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.Client = Client;
exports.socket = socket;
exports.component = component;
exports.px = px;
exports.make = make;
/* Client Not a pure module */

// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");

function initialState(you) {
  return /* record */[
          /* grid : :: */[
            /* Empty */2,
            /* :: */[
              /* Empty */2,
              /* :: */[
                /* Empty */2,
                /* :: */[
                  /* Empty */2,
                  /* :: */[
                    /* Empty */2,
                    /* :: */[
                      /* Empty */2,
                      /* :: */[
                        /* Empty */2,
                        /* :: */[
                          /* Empty */2,
                          /* :: */[
                            /* Empty */2,
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ],
          /* turn : X */0,
          /* you */you,
          /* winner : None */0
        ];
}

function stringify(t) {
  if (t) {
    return "State";
  } else {
    return "Message";
  }
}

var lines = /* :: */[
  /* tuple */[
    0,
    1,
    2
  ],
  /* :: */[
    /* tuple */[
      3,
      4,
      5
    ],
    /* :: */[
      /* tuple */[
        6,
        7,
        8
      ],
      /* :: */[
        /* tuple */[
          0,
          3,
          6
        ],
        /* :: */[
          /* tuple */[
            1,
            4,
            7
          ],
          /* :: */[
            /* tuple */[
              2,
              5,
              8
            ],
            /* :: */[
              /* tuple */[
                0,
                4,
                8
              ],
              /* :: */[
                /* tuple */[
                  2,
                  4,
                  6
                ],
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

function calcWinner(squares) {
  return Belt_List.getBy(lines, (function (param) {
                var a = param[0];
                if (List.nth(squares, a) !== /* Empty */2 && Caml_obj.caml_equal(List.nth(squares, a), List.nth(squares, param[1]))) {
                  return Caml_obj.caml_equal(List.nth(squares, a), List.nth(squares, param[2]));
                } else {
                  return false;
                }
              }));
}

function updateState(action, state) {
  var prevTurn = state[/* turn */1];
  if (typeof action === "number") {
    return initialState(state[/* you */2]);
  } else if (action.tag) {
    var cell = action[0];
    var grid = List.mapi((function (i, el) {
            var match = cell === i;
            if (match) {
              return prevTurn;
            } else {
              return el;
            }
          }), state[/* grid */0]);
    var winner = calcWinner(grid);
    var match = prevTurn === /* X */0;
    var turn = match ? /* O */1 : /* X */0;
    return /* record */[
            /* grid */grid,
            /* turn */turn,
            /* you */state[/* you */2],
            /* winner */winner
          ];
  } else {
    return action[0];
  }
}

exports.initialState = initialState;
exports.stringify = stringify;
exports.lines = lines;
exports.calcWinner = calcWinner;
exports.updateState = updateState;
/* No side effect */

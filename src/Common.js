// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

function initialState(you) {
  return /* record */[
          /* grid : :: */[
            /* Empty */2,
            /* :: */[
              /* Empty */2,
              /* :: */[
                /* Empty */2,
                /* :: */[
                  /* Empty */2,
                  /* :: */[
                    /* Empty */2,
                    /* :: */[
                      /* Empty */2,
                      /* :: */[
                        /* Empty */2,
                        /* :: */[
                          /* Empty */2,
                          /* :: */[
                            /* Empty */2,
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ],
          /* turn : X */0,
          /* you */you,
          /* winner : None */0
        ];
}

function stringify(t) {
  if (t) {
    return "State";
  } else {
    return "Message";
  }
}

function updateState(action, state) {
  var turn = state[/* turn */1];
  if (typeof action === "number") {
    return initialState(state[/* you */2]);
  } else if (action.tag) {
    var cell = action[0];
    var newGrid = List.mapi((function (i, el) {
            if (cell === i) {
              return turn;
            } else {
              return el;
            }
          }), state[/* grid */0]);
    var arrGrid = $$Array.of_list(newGrid);
    var winner = Caml_array.caml_array_get(arrGrid, 0) !== /* Empty */2 && Caml_array.caml_array_get(arrGrid, 0) === Caml_array.caml_array_get(arrGrid, 1) && Caml_array.caml_array_get(arrGrid, 1) === Caml_array.caml_array_get(arrGrid, 2) ? /* Some */[/* :: */[
          0,
          /* :: */[
            1,
            /* :: */[
              2,
              /* [] */0
            ]
          ]
        ]] : (
        Caml_array.caml_array_get(arrGrid, 3) !== /* Empty */2 && Caml_array.caml_array_get(arrGrid, 3) === Caml_array.caml_array_get(arrGrid, 4) && Caml_array.caml_array_get(arrGrid, 4) === Caml_array.caml_array_get(arrGrid, 5) ? /* Some */[/* :: */[
              3,
              /* :: */[
                4,
                /* :: */[
                  5,
                  /* [] */0
                ]
              ]
            ]] : (
            Caml_array.caml_array_get(arrGrid, 6) !== /* Empty */2 && Caml_array.caml_array_get(arrGrid, 6) === Caml_array.caml_array_get(arrGrid, 7) && Caml_array.caml_array_get(arrGrid, 7) === Caml_array.caml_array_get(arrGrid, 8) ? /* Some */[/* :: */[
                  6,
                  /* :: */[
                    7,
                    /* :: */[
                      8,
                      /* [] */0
                    ]
                  ]
                ]] : (
                Caml_array.caml_array_get(arrGrid, 0) !== /* Empty */2 && Caml_array.caml_array_get(arrGrid, 0) === Caml_array.caml_array_get(arrGrid, 3) && Caml_array.caml_array_get(arrGrid, 3) === Caml_array.caml_array_get(arrGrid, 6) ? /* Some */[/* :: */[
                      0,
                      /* :: */[
                        3,
                        /* :: */[
                          6,
                          /* [] */0
                        ]
                      ]
                    ]] : (
                    Caml_array.caml_array_get(arrGrid, 1) !== /* Empty */2 && Caml_array.caml_array_get(arrGrid, 1) === Caml_array.caml_array_get(arrGrid, 4) && Caml_array.caml_array_get(arrGrid, 4) === Caml_array.caml_array_get(arrGrid, 7) ? /* Some */[/* :: */[
                          1,
                          /* :: */[
                            4,
                            /* :: */[
                              7,
                              /* [] */0
                            ]
                          ]
                        ]] : (
                        Caml_array.caml_array_get(arrGrid, 2) !== /* Empty */2 && Caml_array.caml_array_get(arrGrid, 2) === Caml_array.caml_array_get(arrGrid, 5) && Caml_array.caml_array_get(arrGrid, 5) === Caml_array.caml_array_get(arrGrid, 8) ? /* Some */[/* :: */[
                              2,
                              /* :: */[
                                5,
                                /* :: */[
                                  8,
                                  /* [] */0
                                ]
                              ]
                            ]] : (
                            Caml_array.caml_array_get(arrGrid, 0) !== /* Empty */2 && Caml_array.caml_array_get(arrGrid, 0) === Caml_array.caml_array_get(arrGrid, 4) && Caml_array.caml_array_get(arrGrid, 4) === Caml_array.caml_array_get(arrGrid, 8) ? /* Some */[/* :: */[
                                  0,
                                  /* :: */[
                                    4,
                                    /* :: */[
                                      8,
                                      /* [] */0
                                    ]
                                  ]
                                ]] : (
                                Caml_array.caml_array_get(arrGrid, 2) !== /* Empty */2 && Caml_array.caml_array_get(arrGrid, 2) === Caml_array.caml_array_get(arrGrid, 4) && Caml_array.caml_array_get(arrGrid, 4) === Caml_array.caml_array_get(arrGrid, 6) ? /* Some */[/* :: */[
                                      2,
                                      /* :: */[
                                        4,
                                        /* :: */[
                                          6,
                                          /* [] */0
                                        ]
                                      ]
                                    ]] : /* None */0
                              )
                          )
                      )
                  )
              )
          )
      );
    var match = turn === /* X */0;
    return /* record */[
            /* grid */newGrid,
            /* turn */match ? /* O */1 : /* X */0,
            /* you */state[/* you */2],
            /* winner */winner
          ];
  } else {
    return action[0];
  }
}

exports.initialState = initialState;
exports.stringify = stringify;
exports.updateState = updateState;
/* No side effect */
